#!/usr/bin/env ruby
# BSD v2
# Copyright 2015 Wojciech A. Koszek <wojciech@koszek.com>

$g_debug = 1
$g_files = []
$g_flags = []
$g_f_out = nil

def usage
	print "Usage:\n"
	print "\tmacb <files>\n"
	exit 0
end

def dbg(*args)
	if $g_debug == 0 then
		return
	end
	print "# ", *args, "\n"
end

def obj_make
	if File.exist?("obj") then
		system("rm -rf obj")
	end
	Dir.mkdir("obj")
end

def cmake_create(f_out, f_inputs, f_flags)
	# flatten the array and make it string
	str_f_flags = f_flags.map { |s| "#{s}" }.join(' ')
	str_f_inputs = f_inputs.map { |s| "#{s}" }.join(' ')

	f_sources = ""
	f_inputs.each do |i|
		f_sources += " ../#{i}"
	end
	print "f_sources=#{f_sources}\n";

	f = File.open("obj/CMakeLists.txt", "w")
	f.write("cmake_minimum_required (VERSION 2.6)\n");
	f.write("project (#{f_out})\n");
	f.write("add_executable(#{f_out} #{f_sources})\n");
	f.close()

	if !File.exist?("makefile")
		f = File.open("makefile", "w")
		f.write("all:\n");
		f.write("\tmacb #{str_f_flags} #{str_f_inputs}\n");
		f.write("clean:\n");
		f.write("\trm -rf #{f_out} obj\n");
		f.close()
	else
		print "# makefile exists. not rewriting"
	end
end

def tools_run(f_out, f_flags)
	# flatten the array and make it string
	str_f_flags = f_flags.map { |s| "#{s}" }.join(' ')

	dbg "tools_run: #{str_f_flags}"

	child =	fork {
		Dir.chdir("obj");
		system({"CFLAGS" => str_f_flags}, "cmake", "-GXcode")
		system({"CFLAGS" => str_f_flags}, "xcodebuild")
	}
	Process.waitpid(child)

	obj_fn = "./obj/Debug/#{f_out}"
	dbg "tools_run, checking #{obj_fn}"
	if File.exist?(obj_fn) then
		dbg "Rename f_out: #{f_out}"
		File.rename(obj_fn, f_out)
	end
end

#-------------------------------------------------------------------------------

if ARGV.length <= 0 then
	usage
end

$g_f_out = false
#print ARGV.length , "\n"
ARGV.each_with_index do |arg, _idx|
	print ">", arg, "\n"
	if (arg =~ /\.c$/) or (arg =~ /\.h$/) or (arg =~ /\.m$/) or
						(arg =~ /\.swift$/) then
		dbg "Parsing file: #{arg}"
		if $g_f_out == false then
			fn_ext = arg.split('.')
			$g_f_out = fn_ext[0]
			dbg "Will build '#{$g_f_out}' program"
		end
		dbg "Supported file #{arg}"
		$g_files.push(arg)
	elsif (arg =~ /^\-/) then
		dbg "Finding flags! arg = #{arg}"
		$g_flags.push(arg)
	else
		print "# Unsupported file #{arg}, skipping..."
	end
end
if $g_f_out == false then
	print "you must specify output file!\n"
	exit
end

dbg "flags", $g_flags

obj_make()
cmake_create($g_f_out, $g_files, $g_flags)
tools_run($g_f_out, $g_flags)
